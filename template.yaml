AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Event-Driven Order Processing System

# ------PARAMS--------
Parameters:
  Environment:
    Type: String
    Description: Environment (dev, staging, prod)


# ------RESSOURCES--------
Resources:
# --- API GATEWAY ---
  OrderSubmissionApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Description: Order Submission API
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'POST'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'*'"

# --- EVENT BRIDGE --- 
  OrderProcessingEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: OrderProcessingEventBus
  

# ---SNS---
  # SNS Topic for Notifications
  NotificationTopic:
    Type: AWS::SNS::Topic

# ---SQS---

  # SQS Queue for Valid Orders
  OrderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderQueue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true

  # Dead-Letter Queue for Invalid Orders
  DLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: DeadLetterQueue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true

# -----DB-----
  # DynamoDB Table
  OrderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

# ------LAMBDA FUNCTIONS--------

  # Order Submission Lambda
  OrderSubmissionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/order_validation.lambda_handler
      Runtime: python3.9
      CodeUri: .
      Environment:
        Variables:
          SQS_QUEUE_URL: !GetAtt OrderQueue.QueueUrl
          DLQ_URL: !GetAtt DLQ.QueueUrl
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - "sqs:SendMessage"
            Resource:
              - !GetAtt OrderQueue.Arn
              - !GetAtt DLQ.Arn

  # Order Validation Lambda
  OrderValidationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/order_validation.lambda_handler
      Runtime: python3.9
      CodeUri: .
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - "sqs:SendMessage"
            Resource: 
              - !GetAtt OrderQueue.Arn
              - !GetAtt DLQ.Arn
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref OrderQueue
          DLQ_URL: !Ref DLQ

  # Inventory Management Lambda
  InventoryCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/inventory_check.lambda_handler
      Runtime: python3.9
      CodeUri: .
      Policies:
        - DynamoDBCrudPolicy:
            TableName: OrderTable
      Events:
        OrderQueueTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt OrderQueue.Arn

  # Order Completion Lambda
  OrderCompletionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/order_completion.lambda_handler
      Runtime: python3.9
      CodeUri: .
      Policies:
        - DynamoDBCrudPolicy:
            TableName: OrderTable
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref OrderProcessingEventBus

  # Notification Lambda
  NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/notification.lambda_handler
      Runtime: python3.9
      CodeUri: .
      Role: !GetAtt NotificationFunctionRole.Arn
      Environment:
        Variables:
          NOTIFICATION_TOPIC: !Ref NotificationTopic

  NotificationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: NotificationFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref NotificationTopic



# ---OUTPUTS---
Outputs:
  ApiEndpoint:
    Description: API Gateway Endpoint
    Value: !Sub "https://${OrderSubmissionApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/order"
    Export:
      Name: ApiEndpoint
